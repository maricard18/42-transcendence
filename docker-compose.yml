version: '3.8'
services:
  ############# PROD #############
  postgres:
    container_name: postgres
    image: postgres:13-alpine3.18
    user: postgres
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    expose:
      - "5432"
    networks:
      - transcendence
    volumes:
      - postgres_data:/var/lib/postgresql/data/:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat $POSTGRES_USER_FILE) -d $(cat $POSTGRES_DB_FILE)"]
      interval: 5s
      start_period: 5s
      retries: 5
    profiles: [ "" ]
    restart: always

  redis:
    container_name: redis
    image: redis:7.2-alpine3.18
    expose:
      - "6379"
    networks:
      - transcendence
    profiles: [ "" ]
    restart: on-failure

  django-backend:
    container_name: django-backend
    build:
      context: app/
      target: prod
    env_file:
      - .env
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_JWT_SECRET_FILE: /run/secrets/django_jwt_secret
      42_CLIENT_SECRET_FILE: /run/secrets/42_client_secret
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - django_secret
      - django_jwt_secret
      - 42_client_secret
    networks:
      - transcendence
    volumes:
      - daphne_sock:/tmp/daphne/:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      db-migrations:
        condition: service_completed_successfully
      webpack:
        condition: service_completed_successfully
    profiles: [ "" ]
    restart: on-failure

  modsecurity:
    container_name: modsecurity
    build:
      context: .
      dockerfile: modsecurity-nginx/Dockerfile
      args:
        - SSL_CERT
        - SSL_CERT_KEY
    environment:
      # NGINX
      - BACKEND=http://unix:/tmp/daphne/daphne.sock
      - NGINX_ALWAYS_TLS_REDIRECT=on
      - SSL_CERT=${SSL_CERT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
      - SSL_PORT=8443
      - PORT=8080
      # ModSecurity
      - MODSEC_RULE_ENGINE=On
      - ANOMALY_INBOUND=5
      - ANOMALY_OUTBOUND=4
      - BLOCKING_PARANOIA=2
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - transcendence
    volumes:
      - frontend_static_data:/usr/share/nginx/static/:ro
      - frontend_media_data:/usr/share/nginx/media/:ro
      - daphne_sock:/tmp/daphne/:rw
    depends_on:
      webpack:
        condition: service_started
    profiles: [ "" ]
    restart: on-failure

  ############# DEV #############
  postgres-dev:
    container_name: postgres-dev
    image: postgres:13-alpine3.18
    user: postgres
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    ports:
      - "5432:5432"
    networks:
      - transcendence-dev
    volumes:
      - postgres_data-dev:/var/lib/postgresql/data/:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat $POSTGRES_USER_FILE) -d $(cat $POSTGRES_DB_FILE)"]
      interval: 5s
      start_period: 5s
      retries: 5
    profiles: [ "dev" ]
    restart: always

  redis-dev:
    container_name: redis-dev
    image: redis:7.2-alpine3.18
    expose:
      - "6379"
    networks:
      - transcendence-dev
    profiles: [ "dev" ]
    restart: on-failure

  #// TODO : Reference
  django-backend-dev: 
    container_name: django-backend-dev
    build:
      context: app/
      target: dev
    env_file:
      - .env
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_JWT_SECRET_FILE: /run/secrets/django_jwt_secret
      42_CLIENT_SECRET_FILE: /run/secrets/42_client_secret
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - django_secret
      - django_jwt_secret
      - 42_client_secret
    expose:
      - "8000"
    networks:
      - transcendence-dev
    volumes:
      - ./app/:/app/:ro
      - ./app/frontend/static/:/app/frontend/static/:rw
      - ./app/frontend/media/:/app/frontend/media/:rw
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
      db-migrations-dev:
        condition: service_completed_successfully
      webpack-dev:
        condition: service_started
    profiles: [ "dev" ]
    restart: on-failure

  modsecurity-dev:
    container_name: modsecurity-dev
    build:
      context: .
      dockerfile: modsecurity-nginx/Dockerfile
      args:
        - SSL_CERT
        - SSL_CERT_KEY
    environment:
      # NGINX
      - BACKEND=http://django-backend-dev:8000
      - NGINX_ALWAYS_TLS_REDIRECT=on
      - SSL_CERT=${SSL_CERT}
      - SSL_CERT_KEY=${SSL_CERT_KEY}
      - SSL_PORT=8443
      - PORT=8080
      # ModSecurity
      - MODSEC_RULE_ENGINE=On
      - ANOMALY_INBOUND=5
      - ANOMALY_OUTBOUND=4
      - BLOCKING_PARANOIA=2
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - transcendence-dev
    volumes:
      - ./app/frontend/static/:/usr/share/nginx/static/:ro
      - ./app/frontend/media/:/usr/share/nginx/media/:ro
    depends_on:
      webpack-dev:
        condition: service_started
    profiles: [ "dev" ]
    restart: on-failure
  
  #// OPTIMIZE : Reference
  vault-dev:
    image: hashicorp/vault:latest
    container_name: vault-dev
    ports:
      - 8200:8200
    networks:
      - transcendence-dev
    volumes:
      - ./vault/config:/vault/config
      # - ./vault/data:/vault/data
    command: ["vault", "server", "-config=/vault/config/vault-config.json"]
    cap_add:
      - IPC_LOCK
    # profiles: [ "dev" ]
    profiles: [ "test" ]

  vault-init-dev:
    image: hashicorp/vault:latest
    container_name: vault-init-dev
    command:
      - "sh"
      - "-c"
      - "vault/scripts/init.sh"
    networks:
      - transcendence-dev
    environment:
      VAULT_ADDR: http://vault-dev:8200
    volumes:
      - ./vault/scripts:/vault/scripts
      - ./vault/keys:/vault/keys
      - ./vault/root:/vault/root
      - ./vault/policies:/vault/policies
      - ./vault/transcendence:/vault/transcendence
    depends_on:
      vault-dev:
        condition: service_started
    # profiles: [ "dev" ]
    profiles: [ "test" ]

  ############# TOOLS #############
  ############# PROD #############
  db-migrations:
    container_name: db-migrations
    build:
      context: app/
      target: tools
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_JWT_SECRET_FILE: /run/secrets/django_jwt_secret
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - django_secret
      - django_jwt_secret
    entrypoint: ["/bin/sh", "/app/tools/db-migrations.sh"]
    networks:
      - transcendence
    depends_on:
      postgres:
        condition: service_healthy
    profiles: [ "", "tools" ]
    restart: on-failure

  collectstatic:
    container_name: collectstatic
    build:
      context: app/
      target: tools
    volumes:
      - app_data:/app/:rw
      - frontend_static_data:/app/frontend/static/:rw
      - frontend_media_data:/app/frontend/media/:rw
    entrypoint: [ "/bin/sh", "/app/tools/collectstatic.sh" ]
    profiles: [ "", "tools" ]
    restart: on-failure

  webpack:
    container_name: webpack
    build:
      context: app/frontend/
      target: prod
    volumes:
      - app_data:/app/:rw
      - frontend_static_data:/app/frontend/static/:rw
      - frontend_media_data:/app/frontend/media/:rw
    depends_on:
      collectstatic:
        condition: service_completed_successfully
    profiles: [ "", "tools" ]

  ############# DEV #############
  db-migrations-dev:
    container_name: db-migrations-dev
    build:
      context: app/
      target: tools
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      DJANGO_SECRET_FILE: /run/secrets/django_secret
      DJANGO_JWT_SECRET_FILE: /run/secrets/django_jwt_secret
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - django_secret
      - django_jwt_secret
    entrypoint: [ "/bin/sh", "/app/tools/db-migrations.sh" ]
    networks:
      - transcendence-dev
    depends_on:
      postgres-dev:
        condition: service_healthy
    profiles: [ "dev", "tools" ]
    restart: on-failure

  collectstatic-dev:
    container_name: collectstatic-dev
    build:
      context: app/
      target: tools
    volumes:
      - ./app/frontend/:/app/frontend/:rw
    entrypoint: [ "python3", "/app/manage.py", "collectstatic", "--noinput" ]
    profiles: [ "dev", "tools" ]
    restart: on-failure

  webpack-dev:
    container_name: webpack-dev
    build:
      context: app/frontend/
      target: dev
    volumes:
      - ./app/frontend/:/app/frontend/:rw
    environment:
      - VAULT_TOKEN=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_ADDR=${VAULT_ADDR}
    depends_on:
      collectstatic-dev:
        condition: service_completed_successfully
    profiles: [ "dev", "tools" ]
    restart: on-failure

networks:
  transcendence:
    driver: bridge
  transcendence-dev:
    driver: bridge

volumes:
  ############# PROD #############
  app_data:
  daphne_sock:
  postgres_data:
  frontend_static_data:
  frontend_media_data:
  ############# DEV #############
  postgres_data-dev:

secrets:
  postgres_db:
    file: ./secrets/postgres-db
  postgres_user:
    file: ./secrets/postgres-user
  postgres_password:
    file: ./secrets/postgres-passwd
  django_secret:
    file: ./secrets/django-secret
  django_jwt_secret:
    file: ./secrets/django-jwt-secret
  42_client_secret:
    file: ./secrets/42-client-secret