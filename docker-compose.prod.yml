services:
  auth_service-postgres:
    build:
      context: postgres/
    user: postgres
    environment:
      POSTGRES_HOST_FILE: /run/secrets/auth_service-postgres_host
      VAULT_ADDR: https://vault_service:8200
      VAULT_MOUNT: auth_service
      VAULT_SKIP_VERIFY: true
      VAULT_CACERT: ${SSL_CERT_PATH}${SSL_CERT_FILE}
      VAULT_ROLE_ID_FILE: /vault/auth_service/role-id
      VAULT_SECRET_ID_FILE: /vault/auth_service/secret-id
    secrets:
      - auth_service-postgres_host
    expose:
      - "5432"
    networks:
      - transcendence
    volumes:
      - auth_service-postgres_data:/var/lib/postgresql/data/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-auth_service-data:/vault/auth_service/:ro
    healthcheck:
      test: [ "CMD-SHELL", "docker-healthcheck.sh" ]
      interval: 5s
      start_period: 10s
      retries: 5
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    cap_add:
      - IPC_LOCK
    profiles: [ "", "auth_service" ]
    restart: always

  auth_service:
    build:
      context: auth_service/
      target: prod
    environment:
      POSTGRES_HOST_FILE: /run/secrets/auth_service-postgres_host
      SSO_42_CLIENT_ID: ${SSO_42_CLIENT_ID}
      SSO_42_REDIRECT_URI: ${SSO_42_REDIRECT_URI}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/auth_service/role-id
      VAULT_SECRET_ID_FILE: /vault/auth_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - auth_service-postgres_host
    expose:
      - "8000"
    networks:
      - transcendence
    volumes:
      - auth_service-daphne_sock:/run/daphne/:rw
      - media_data:/app/media/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-auth_service-data:/vault/auth_service/:ro
    depends_on:
      modsecurity:
        condition: service_started
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      auth_service-postgres:
        condition: service_healthy
      auth_service-db_migrations:
        condition: service_completed_successfully
    profiles: [ "", "auth_service" ]
    restart: always

  game_service-postgres:
    build:
      context: postgres/
    user: postgres
    environment:
      POSTGRES_HOST_FILE: /run/secrets/game_service-postgres_host
      VAULT_ADDR: https://vault_service:8200
      VAULT_MOUNT: game_service
      VAULT_SKIP_VERIFY: true
      VAULT_CACERT: ${SSL_CERT_PATH}${SSL_CERT_FILE}
      VAULT_ROLE_ID_FILE: /vault/game_service/role-id
      VAULT_SECRET_ID_FILE: /vault/game_service/secret-id
    secrets:
      - game_service-postgres_host
    expose:
      - "5432"
    networks:
      - transcendence
    volumes:
      - game_service-postgres_data:/var/lib/postgresql/data/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-game_service-data:/vault/game_service/:ro
    healthcheck:
      test: [ "CMD-SHELL", "docker-healthcheck.sh" ]
      interval: 5s
      start_period: 10s
      retries: 5
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    cap_add:
      - IPC_LOCK
    profiles: [ "", "game_service" ]
    restart: always

  game_service:
    build:
      context: game_service/
      target: prod
    environment:
      REDIS_HOST: game_service-redis
      REDIS_PORT: 6379
      POSTGRES_HOST_FILE: /run/secrets/game_service-postgres_host
      POSTGRES_DB_FILE: /run/secrets/game_service-postgres_db
      POSTGRES_USER_FILE: /run/secrets/game_service-postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/game_service-postgres_password
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/game_service/role-id
      VAULT_SECRET_ID_FILE: /vault/game_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - game_service-postgres_host
    expose:
      - "8000"
    networks:
      - transcendence
    volumes:
      - game_service-daphne_sock:/run/daphne/:rw
      - media_data:/app/media/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-game_service-data:/vault/game_service/:ro
    depends_on:
      modsecurity:
        condition: service_started
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      game_service-postgres:
        condition: service_healthy
      game_service-db_migrations:
        condition: service_completed_successfully
      game_service-redis:
        condition: service_healthy
    profiles: [ "", "game_service" ]
    restart: always

  friendship_service-postgres:
    build:
      context: postgres/
    user: postgres
    environment:
      POSTGRES_HOST_FILE: /run/secrets/friendship_service-postgres_host
      VAULT_ADDR: https://vault_service:8200
      VAULT_MOUNT: friendship_service
      VAULT_SKIP_VERIFY: true
      VAULT_CACERT: ${SSL_CERT_PATH}${SSL_CERT_FILE}
      VAULT_ROLE_ID_FILE: /vault/friendship_service/role-id
      VAULT_SECRET_ID_FILE: /vault/friendship_service/secret-id
    secrets:
      - friendship_service-postgres_host
    expose:
      - "5432"
    networks:
      - transcendence
    volumes:
      - friendship_service-postgres_data:/var/lib/postgresql/data/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-friendship_service-data:/vault/friendship_service/:ro
    healthcheck:
      test: [ "CMD-SHELL", "docker-healthcheck.sh" ]
      interval: 5s
      start_period: 10s
      retries: 5
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    cap_add:
      - IPC_LOCK
    profiles: [ "", "friendship_service" ]
    restart: always

  friendship_service:
    build:
      context: friendship_service/
      target: prod
    environment:
      REDIS_HOST: friendship_service-redis
      REDIS_PORT: 6379
      POSTGRES_HOST_FILE: /run/secrets/friendship_service-postgres_host
      POSTGRES_DB_FILE: /run/secrets/friendship_service-postgres_db
      POSTGRES_USER_FILE: /run/secrets/friendship_service-postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/friendship_service-postgres_password
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/friendship_service/role-id
      VAULT_SECRET_ID_FILE: /vault/friendship_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - friendship_service-postgres_host
    expose:
      - "8000"
    networks:
      - transcendence
    volumes:
      - friendship_service-daphne_sock:/run/daphne/:rw
      - media_data:/app/media/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-friendship_service-data:/vault/friendship_service/:ro
    depends_on:
      modsecurity:
        condition: service_started
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      friendship_service-postgres:
        condition: service_healthy
      friendship_service-db_migrations:
        condition: service_completed_successfully
      friendship_service-redis:
        condition: service_healthy
    profiles: [ "", "friendship_service" ]
    restart: always

  modsecurity:
    build:
      context: .
      dockerfile: modsecurity-nginx/Dockerfile
      target: prod
      args:
        - SSL_CERT_PATH
        - SSL_CERT_FILE
        - SSL_CERT_KEY_PATH
        - SSL_CERT_KEY_FILE
    environment:
      # NGINX
      AUTH_SERVICE_ADDR: http://unix:/run/daphne/auth_service/daphne.sock
      GAME_SERVICE_ADDR: http://unix:/run/daphne/game_service/daphne.sock
      FRIENDSHIP_SERVICE_ADDR: http://unix:/run/daphne/friendship_service/daphne.sock
      VAULT_SERVICE_ADDR: https://vault_service:8200
      NGINX_ALWAYS_TLS_REDIRECT: on
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
      SSL_CERT_KEY_PATH: ${SSL_CERT_KEY_PATH}${SSL_CERT_KEY_FILE}
      VAULT_PORT: 8200
      SSL_PORT: 8443
      PORT: 8080
      # ModSecurity
      MODSEC_RULE_ENGINE: On
      ANOMALY_INBOUND: 5
      ANOMALY_OUTBOUND: 4
      BLOCKING_PARANOIA: 2
      ALLOWED_METHODS: GET HEAD POST PUT DELETE OPTIONS
    ports:
      - "8080:8080"
      - "8200:8200"
      - "8443:8443"
    networks:
      - transcendence
    volumes:
      - auth_service-daphne_sock:/run/daphne/auth_service/:rw
      - game_service-daphne_sock:/run/daphne/game_service/:rw
      - friendship_service-daphne_sock:/run/daphne/friendship_service/:rw
      - web_service-data:/usr/share/nginx/html/:ro
      - static_data:/app/static/:ro
      - media_data:/app/media/:ro
      - ssl_cert_data:${SSL_CERT_PATH}:rw
      - ssl_cert_key_data:${SSL_CERT_KEY_PATH}:rw
      - telegraf_data:/var/log/telegraf/:rw
    profiles: [ "", "auth_service", "game_service", "friendship_service", "web_service" ]
    restart: always

  game_service-redis:
    image: redis:7.2-alpine3.18
    expose:
      - "6379"
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", 'redis-cli ping || exit 1' ]
      interval: 5s
      start_period: 10s
      retries: 5
    profiles: [ "", "game_service" ]
    restart: always

  friendship_service-redis:
    image: redis:7.2-alpine3.18
    expose:
      - "6379"
    networks:
      - transcendence
    healthcheck:
      test: [ "CMD-SHELL", 'redis-cli ping || exit 1' ]
      interval: 5s
      start_period: 10s
      retries: 5
    profiles: [ "", "friendship_service" ]
    restart: always

  vault_service:
    build:
      context: vault/
      target: service
      args:
        SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
        SSL_CERT_KEY_PATH: ${SSL_CERT_KEY_PATH}${SSL_CERT_KEY_FILE}
    environment:
      VAULT_SKIP_VERIFY: true
    expose:
      - "8200"
    networks:
      - transcendence
    volumes:
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - ssl_cert_key_data:${SSL_CERT_KEY_PATH}:ro
    healthcheck:
      test: [ "CMD-SHELL", 'vault status' ]
      interval: 5s
      start_period: 10s
      retries: 5
    depends_on:
      modsecurity:
        condition: service_started
    cap_add:
      - IPC_LOCK
    profiles: [ "", "auth_service", "web_service" ]
    restart: always

  telegraf:
    build:
      context: monitoring/telegraf/
      args:
        - NGINX_METRICS_URL=https://modsecurity:8081/nginx_status
    networks:
      - transcendence
    volumes:
      - telegraf_data:/var/log/telegraf/:ro
    depends_on:
      modsecurity:
        condition: service_started
    profiles: [ "", "monitoring_service" ]
    restart: always

  alertmanager:
    build:
      context: monitoring/alertmanager/
      args:
        - SLACK_ALERTMANAGER_WEBHOOK
        - SLACK_ALERTMANAGER_CHANNEL
    command: [ '--config.file=/etc/alertmanager/alert.yml' ]
    networks:
      - transcendence
    profiles: [ "", "monitoring_service" ]
    restart: always

  prometheus:
    build:
      context: monitoring/prometheus/
      args:
        PROMETHEUS_ADDR: prometheus:9090
        TELEGRAF_ADDR: telegraf:9125
        ALERTMANAGER_ADDR: alertmanager:9093
    user: root
    privileged: true
    command: [ "--config.file=/etc/prometheus/prometheus.yml" ]
    expose:
      - "9090"
    networks:
      - transcendence
    volumes:
      - prometheus_data:/prometheus
    profiles: [ "", "monitoring_service" ]
    restart: always

  grafana:
    build:
      context: monitoring/grafana/
      args:
        PROMETHEUS_URL: http://prometheus:9090
        SSL_CERT_PATH: ${SSL_CERT_PATH}
        SSL_CERT_FILE: ${SSL_CERT_FILE}
        SSL_CERT_KEY_PATH: ${SSL_CERT_KEY_PATH}
        SSL_CERT_KEY_FILE: ${SSL_CERT_KEY_FILE}
    environment:
      GF_SECURITY_ADMIN_USER__FILE: /run/secrets/grafana_username
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/dashboards/Home.json
    secrets:
      - grafana_username
      - grafana_password
    ports:
      - "3000:3000"
    networks:
      - transcendence
    volumes:
      - grafana_data:/var/lib/grafana
    profiles: [ "", "monitoring_service" ]
    restart: always

  ############# TOOLS #############
  vault_service-init:
    build:
      context: vault/
      target: init
    environment:
      VAULT_ADDR: https://vault_service:8200
      VAULT_SKIP_VERIFY: true
      VAULT_CACERT: ${SSL_CERT_PATH}${SSL_CERT_FILE}
      VAULT_APPROLE_ENTITIES: auth_service game_service friendship_service
      SSO_42_CLIENT_SECRET_FILE: /run/secrets/sso_42_client_secret
    secrets:
      - sso_42_client_secret
    networks:
      - transcendence
    volumes:
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_keys_data:/vault/keys/:rw
      - vault_root_data:/vault/root/:rw
      - vault_services-project-data:/vault/transcendence/:rw
      - vault_services-auth_service-data:/vault/auth_service/:rw
      - vault_services-game_service-data:/vault/game_service/:rw
      - vault_services-friendship_service-data:/vault/friendship_service/:rw
      - vault_services-web_service-data:/vault/web_service/:rw
    depends_on:
      vault_service:
        condition: service_started
    restart: on-failure:3

  auth_service-db_migrations:
    build:
      context: auth_service/
      target: tools
    environment:
      POSTGRES_HOST_FILE: /run/secrets/auth_service-postgres_host
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/auth_service/role-id
      VAULT_SECRET_ID_FILE: /vault/auth_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - auth_service-postgres_host
    entrypoint: [ "/bin/sh", "/app/tools/db-migrations.sh" ]
    networks:
      - transcendence
    volumes:
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-auth_service-data:/vault/auth_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      auth_service-postgres:
        condition: service_healthy
    profiles: [ "", "auth_service", "tools" ]
    restart: on-failure:3

  auth_service-collectstatic:
    build:
      context: auth_service/
      target: tools
    environment:
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/auth_service/role-id
      VAULT_SECRET_ID_FILE: /vault/auth_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    entrypoint: [ "python3", "/app/manage.py", "collectstatic", "--noinput" ]
    networks:
      - transcendence
    volumes:
      - ./auth_service/:/app/:ro
      - static_data:/app/static/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-auth_service-data:/vault/auth_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    profiles: [ "", "auth_service", "tools" ]
    restart: on-failure:3

  game_service-db_migrations:
    build:
      context: game_service/
      target: tools
    environment:
      POSTGRES_HOST_FILE: /run/secrets/game_service-postgres_host
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/game_service/role-id
      VAULT_SECRET_ID_FILE: /vault/game_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - game_service-postgres_host
    entrypoint: [ "/bin/sh", "/app/tools/db-migrations.sh" ]
    networks:
      - transcendence
    volumes:
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-game_service-data:/vault/game_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      game_service-postgres:
        condition: service_healthy
    profiles: [ "", "game_service", "tools" ]
    restart: on-failure:3

  game_service-collectstatic:
    build:
      context: game_service/
      target: tools
    environment:
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/game_service/role-id
      VAULT_SECRET_ID_FILE: /vault/game_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    entrypoint: [ "python3", "/app/manage.py", "collectstatic", "--noinput" ]
    networks:
      - transcendence
    volumes:
      - ./game_service/:/app/:ro
      - static_data:/app/static/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-game_service-data:/vault/game_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    profiles: [ "", "game_service", "tools" ]
    restart: on-failure:3

  friendship_service-db_migrations:
    build:
      context: friendship_service/
      target: tools
    environment:
      POSTGRES_HOST_FILE: /run/secrets/friendship_service-postgres_host
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/friendship_service/role-id
      VAULT_SECRET_ID_FILE: /vault/friendship_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    secrets:
      - friendship_service-postgres_host
    entrypoint: [ "/bin/sh", "/app/tools/db-migrations.sh" ]
    networks:
      - transcendence
    volumes:
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-friendship_service-data:/vault/friendship_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
      friendship_service-postgres:
        condition: service_healthy
    profiles: [ "", "friendship_service", "tools" ]
    restart: on-failure:3

  friendship_service-collectstatic:
    build:
      context: friendship_service/
      target: tools
    environment:
      VAULT_ADDR: https://modsecurity:8200
      VAULT_ROLE_ID_FILE: /vault/friendship_service/role-id
      VAULT_SECRET_ID_FILE: /vault/friendship_service/secret-id
      SSL_CERT_PATH: ${SSL_CERT_PATH}${SSL_CERT_FILE}
    entrypoint: [ "python3", "/app/manage.py", "collectstatic", "--noinput" ]
    networks:
      - transcendence
    volumes:
      - ./friendship_service/:/app/:ro
      - static_data:/app/static/:rw
      - ssl_cert_data:${SSL_CERT_PATH}:ro
      - vault_services-friendship_service-data:/vault/friendship_service/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    profiles: [ "", "friendship_service", "tools" ]
    restart: on-failure:3

  web_service:
    build:
      context: web_service/
      target: prod
    environment:
      SSO_42_CLIENT_ID: ${SSO_42_CLIENT_ID}
      SSO_42_REDIRECT_URI: ${SSO_42_REDIRECT_URI}
    volumes:
      - web_service-data:/app/:rw
      - vault_services-project-data:/vault/transcendence/:ro
    depends_on:
      vault_service-init:
        condition: service_started
      vault_service:
        condition: service_healthy
    profiles: [ "", "web_service", "tools" ]
    restart: on-failure:3

  nikto:
    build:
      context: nikto/
    environment:
      WEB_ADDR: https://modsecurity:8443
    networks:
      - transcendence
    volumes:
      - ./nikto/output/:/git/nikto/output/:rw
    depends_on:
      modsecurity:
        condition: service_started
    profiles: [ "web_service", "tools" ]
    restart: on-failure:3

networks:
  transcendence:
    driver: bridge

volumes:
  auth_service-postgres_data:
  game_service-postgres_data:
  friendship_service-postgres_data:
  auth_service-daphne_sock:
  game_service-daphne_sock:
  friendship_service-daphne_sock:
  web_service-data:
  static_data:
  media_data:

  ssl_cert_data:
  ssl_cert_key_data:

  vault_root_data:
  vault_keys_data:
  vault_services-project-data:
  vault_services-auth_service-data:
  vault_services-game_service-data:
  vault_services-friendship_service-data:
  vault_services-web_service-data:

  prometheus_data:
  grafana_data:
  telegraf_data:

secrets:
  auth_service-postgres_host:
    file: ./secrets/auth_service/postgres-host
  game_service-postgres_host:
    file: ./secrets/game_service/postgres-host
  friendship_service-postgres_host:
    file: ./secrets/friendship_service/postgres-host
  sso_42_client_secret:
    file: ./secrets/sso-42-client-secret
  grafana_username:
    file: ./secrets/grafana/grafana-username
  grafana_password:
    file: ./secrets/grafana/grafana-password  
    
    